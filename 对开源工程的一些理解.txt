一、jsoncpp
1. 架构：基于规则的系统，规则表示、解析、查询三要素很齐全
2. 对规则表示value对象的很感兴趣，以测试用例为线索阅读了部分关键代码
（1）内部使用union来表示uint_32、string、array、object等数据类型，使用枚举来标记数据类型
（2）array和object均使用std::map来实现
     map的key为下标，value为值得方法来表示array（其实数组本来就可以看做下标为key的map）
	 object的表示不用解释
3. json标准规则的解析我不感兴趣，没有阅读相关代码
4. 查询也很简单，都是基于map的查询

心得：
1. 从github拉代码：可以获取所有的提交日志；也能知道自己改过什么
2. 以测试用例为线索：
   测试用例非常简单容易阅读；
   测试用例是对整个功能分割成的最小单元，容易理解；
   测试用例一般都是对重点进行测试，易于把握重点
   
   
二、ProcessHacker
1. 架构：数据采集器 + 队列缓存 + 界面，总体就是model + view的架构
2. 对其进程数据的采集很感兴趣，大致阅读了代码：使用NtQuerySystemInformation来采集信息，不会产生性能问题
3. 网络和服务的的数据采集也值得阅读，了解原理，但是今天没时间了

心得：
1. 从readme入手了解非系统需求， 然后下载vs2019从编译入手，此开源项目直接包含sln文件，比较少见
2. 无单元测试用例，所以此方面无法下手
2. 整体看了进程模型、模块关系，只有一个进程无dll，所以这方面无线索
3. 整体看了工程，只有三个工程，一个静态库phlib，两个exe工程。静态库应该是两个exe的公用代码。
4. 整体浏览phlib的所有类，从类命名上没有找到线索，一般共一个公共lib库很难找到有价值的线索
5. 整体浏览ProcessHacker，从类命名（xxxxlist，xxxtree）找到线索， 
   （1）以Init函数为主题了解界面的的基本情况
   （2）界面必然依赖model，所以特别在意数据结果。在调试的过程中发现了PPH_PROCESS_ITEM数据结构
   （3）以PPH_PROCESS_ITEM为线索找到了创建它的地方，也就找到了最有价值的地方，阅读了其遍历进程信息的线程函数
